{"version":3,"sources":["redux/sessionCounterSlice.js","redux/breakCounterSlice.js","audio/openhat.wav","redux/timerSlice.js","components/Clock.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["sessionCounterSlice","createSlice","name","initialState","value","reducers","incSession","state","decSession","resetSession","sessionCounterSelector","sessionCounter","actions","breakCounterSlice","incBreak","decBreak","resetBreak","breakCounterSelector","breakCounter","timerSlice","sessionVal","breakVal","isRed","isBreak","isPlaying","isBreakTitle","interval","setSessionTimer","action","payload","resetSessionTimer","setBreakTimer","countdown","mins","split","slice","indexOf","join","secs","String","length","playSound","Howl","src","openhat","play","switchCountdown","switched","playTrue","playFalse","int","setSessionTimerThunk","dispatch","getState","timer","sessionValue","setBreakTimerThunk","breakValue","sessionTimerSelector","breakTimerSelector","isRedSelector","isBreakSelector","isBreakTitleSelector","Clock","sessionCount","useSelector","breakCount","sessionTimer","breakTimer","useDispatch","id","className","onClick","style","color","clearInterval","setInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","sessionCounterReducer","breakCounterReducer","timerReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.8258802c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const sessionCounterSlice = createSlice({\r\n    name: 'sessionCounter',\r\n    initialState: {\r\n        value: 25\r\n    },\r\n    reducers: {\r\n        incSession: state => {\r\n            if (state.value !== 60) {\r\n                state.value += 1\r\n            }\r\n        },\r\n        decSession: state => {\r\n            if (state.value !== 1) {\r\n                state.value -= 1\r\n            }\r\n        },\r\n        resetSession: state => {\r\n            state.value = 25\r\n        }\r\n    }\r\n})\r\n\r\nexport const incSessionThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(incSession())\r\n    }\r\n}\r\n\r\nexport const decSessionThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(decSession())\r\n    }\r\n}\r\n\r\nexport const resetSessionThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(resetSession())\r\n    }\r\n}\r\n\r\nexport const sessionCounterSelector = state => state.sessionCounter.value\r\n\r\nexport const { incSession, decSession, resetSession } = sessionCounterSlice.actions\r\nexport default sessionCounterSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const breakCounterSlice = createSlice({\r\n    name: \"breakCounter\",\r\n    initialState: {\r\n        value: 5\r\n    },\r\n    reducers: {\r\n        incBreak: state => {\r\n            if (state.value !== 60) {\r\n                state.value += 1\r\n            }\r\n        },\r\n        decBreak: state => {\r\n            if (state.value !== 1) {\r\n                state.value -= 1\r\n            }\r\n        }, \r\n        resetBreak: state => {\r\n            state.value = 5\r\n        }\r\n    }\r\n})\r\n\r\nexport const incBreakThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(incBreak())\r\n    }\r\n}\r\n\r\nexport const decBreakThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(decBreak())\r\n    }\r\n}\r\n\r\nexport const resetBreakThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState()\r\n    if (!timer.isPlaying) {\r\n        dispatch(resetBreak())\r\n    }\r\n}\r\n\r\nexport const breakCounterSelector = state => state.breakCounter.value\r\n\r\nexport const { incBreak, decBreak, resetBreak } = breakCounterSlice.actions\r\nexport default breakCounterSlice.reducer","export default __webpack_public_path__ + \"static/media/openhat.482e5231.wav\";","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Howl } from 'howler';\r\nimport openhat from '../audio/openhat.wav'\r\n\r\nexport const timerSlice = createSlice({\r\n    name: \"timer\",\r\n    \r\n    initialState: {\r\n        sessionVal: \"25:00\",\r\n        breakVal: \"05:00\",\r\n        isRed: false,\r\n        isBreak: false,\r\n        isPlaying: false,\r\n        isBreakTitle: false,\r\n        interval: null\r\n    },\r\n\r\n    reducers: {\r\n\r\n        setSessionTimer: (state, action) => {\r\n            state.sessionVal = action.payload\r\n        },\r\n\r\n        resetSessionTimer: state => {\r\n            state.sessionVal = `25:00`\r\n        },\r\n\r\n        setBreakTimer: (state, action) => {\r\n            state.breakVal = action.payload\r\n        },\r\n\r\n        countdown: (state, action) => {\r\n\r\n            let mins = (action.payload.split(\"\").slice(0, action.payload.indexOf(\":\")).join(''))\r\n            let secs = (action.payload.split(\"\").slice(action.payload.indexOf(\":\") + 1).join(''))\r\n\r\n            if (secs === \"00\") {\r\n                secs = \"59\"\r\n                mins -= 1\r\n            } else {\r\n                secs -= 1\r\n            }\r\n\r\n            if (mins < \"01\") {\r\n                state.isRed = true\r\n            } else {\r\n                state.isRed = false\r\n            }\r\n\r\n            if (String(secs).length === 1) {\r\n                secs = `0${secs}`\r\n            }\r\n\r\n            if (String(mins).length === 1) {\r\n                mins = `0${mins}`\r\n            }\r\n\r\n            if (state.isBreak) {\r\n                state.breakVal = `${mins}:${secs}`\r\n            } else {\r\n                state.sessionVal = `${mins}:${secs}`\r\n            }\r\n        },\r\n\r\n        playSound: () => {\r\n            let sound = new Howl({\r\n                src: [openhat]\r\n            });            \r\n            sound.play();\r\n        },\r\n\r\n        switchCountdown: (state, action) => {\r\n\r\n            state.isBreak = !state.isBreak\r\n            state.isRed = !state.isRed\r\n            state.isBreakTitle = !state.isBreakTitle\r\n            state.switched = !state.switched\r\n\r\n            if (!state.isBreak) {\r\n                if (String(action.payload).length === 1) {\r\n                    state.sessionVal = `0${action.payload}:00`\r\n                } else {\r\n                    state.sessionVal = `${action.payload}:00`\r\n                }\r\n            }  else {\r\n                if (String(action.payload).length === 1) {\r\n                    state.breakVal = `0${action.payload}:00`\r\n                } else {\r\n                    state.breakVal = `${action.payload}:00`\r\n                }\r\n            }\r\n        },\r\n\r\n        playTrue: state => {\r\n            state.isPlaying = true\r\n        },\r\n\r\n        playFalse: state => {\r\n            state.isPlaying = false\r\n        },\r\n\r\n        int: (state, action) => {\r\n            state.interval = action.payload\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const timerThunk = () => (dispatch, getState) => {\r\n\r\n    const { timer } = getState()\r\n    let interval; \r\n\r\n    if (!timer.isPlaying) {\r\n        interval = setInterval(() => {\r\n            const { timer, sessionCounter, breakCounter } = getState()\r\n            if (!timer.isBreak) {\r\n                if (timer.sessionVal === `00:00`) {\r\n                    dispatch(playSound()) \r\n                    dispatch(switchCountdown(breakCounter.value))\r\n                } else {\r\n                    dispatch(countdown(timer.sessionVal))\r\n                }\r\n            } else {\r\n                if (timer.breakVal === `00:00`) {\r\n                    dispatch(playSound())\r\n                    dispatch(switchCountdown(sessionCounter.value))            \r\n                } else {\r\n                    dispatch(countdown(timer.breakVal))\r\n                }\r\n            }\r\n        }, 1000)\r\n\r\n        dispatch(playTrue())\r\n        dispatch(int(interval))\r\n\r\n    }  else {\r\n        const { timer } = getState()\r\n        clearInterval(timer.interval)\r\n        dispatch(playFalse())\r\n    }\r\n}\r\n\r\nexport const setSessionTimerThunk = () => (dispatch, getState) => {\r\n    const { timer, sessionCounter } = getState();\r\n    if (!timer.isPlaying) {\r\n        if (sessionCounter.value < 10) {\r\n            let sessionValue = `0${sessionCounter.value}:00`\r\n            dispatch(setSessionTimer(sessionValue))\r\n        } else {\r\n            let sessionValue = `${sessionCounter.value}:00`\r\n            dispatch(setSessionTimer(sessionValue))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setBreakTimerThunk = () => (dispatch, getState) => {\r\n    const { timer, breakCounter } = getState();\r\n    if (!timer.isPlaying) {\r\n        if (breakCounter.value < 10) {\r\n            let breakValue = `0${breakCounter.value}:00`\r\n            dispatch(setBreakTimer(breakValue))\r\n        } else {\r\n            let breakValue = `${breakCounter.value}:00`\r\n            dispatch(setBreakTimer(breakValue))\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetSessionTimerThunk = () => (dispatch, getState) => {\r\n    const { timer } = getState();\r\n    if (!timer.isPlaying) {\r\n        dispatch(resetSessionTimer())\r\n    }\r\n}\r\n\r\nexport const sessionTimerSelector = state => state.timer.sessionVal\r\nexport const breakTimerSelector = state => state.timer.breakVal\r\nexport const isRedSelector = state => state.timer.isRed\r\nexport const isBreakSelector = state => state.timer.isBreak\r\nexport const isBreakTitleSelector = state => state.timer.isBreakTitle\r\nexport const switchedSelector = state => state.timer.switched\r\n\r\nexport const { setSessionTimer, resetSessionTimer, setBreakTimer, countdown, switchCountdown, playTrue, playFalse, int, playSound } = timerSlice.actions\r\nexport default timerSlice.reducer\r\n","import { FaArrowUp, FaArrowDown, FaPause, FaPlay, FaRedo } from 'react-icons/fa';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { incSessionThunk, decSessionThunk, resetSessionThunk, sessionCounterSelector } from '../redux/sessionCounterSlice';\r\nimport { incBreakThunk, decBreakThunk, resetBreakThunk, breakCounterSelector } from '../redux/breakCounterSlice';\r\n\r\n\r\nimport { \r\n         setSessionTimerThunk,\r\n         setBreakTimerThunk,\r\n         resetSessionTimerThunk,\r\n         timerThunk,\r\n         sessionTimerSelector,\r\n         breakTimerSelector,\r\n         isRedSelector,\r\n         isBreakSelector,\r\n         isBreakTitleSelector,\r\n        } from '../redux/timerSlice';\r\n\r\n\r\nconst Clock = ()  => {\r\n\r\n    const sessionCount = useSelector(sessionCounterSelector)\r\n    const breakCount = useSelector(breakCounterSelector)\r\n    const sessionTimer = useSelector(sessionTimerSelector)\r\n    const breakTimer = useSelector(breakTimerSelector)\r\n    const isRed = useSelector(isRedSelector)\r\n    const isBreak = useSelector(isBreakSelector)\r\n    const isBreakTitle = useSelector(isBreakTitleSelector)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n        <>\r\n            <div id=\"container\">\r\n                <h1 id=\"title\">25 + 5 Clock</h1>\r\n                <div id=\"length-wrapper\">\r\n                    <div id=\"break\">\r\n                        <h3>Break Length</h3>\r\n                        <div className=\"control\">\r\n                            <button><FaArrowDown onClick={() => { dispatch(decBreakThunk()); dispatch(setBreakTimerThunk()) }} className=\"icons\" /></button>\r\n                            <span className=\"duration\" id=\"break-count\">{breakCount}</span>\r\n                            <button><FaArrowUp onClick={() => { dispatch(incBreakThunk()); dispatch(setBreakTimerThunk()) }} className=\"icons\" /></button>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"session\">\r\n                        <h3>Session Length</h3>\r\n                        <div className=\"control\">\r\n                            <button><FaArrowDown onClick={() => { dispatch(decSessionThunk()); dispatch(setSessionTimerThunk()) }} className=\"icons\" /></button>\r\n                            <span className=\"duration\" id=\"session-count\">{sessionCount}</span>\r\n                            <button><FaArrowUp onClick={() => { dispatch(incSessionThunk()); dispatch(setSessionTimerThunk()) }} className=\"icons\" /></button>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n                <div id=\"timer\">\r\n                    <span style={isRed ? { color: \"red\" } : { color: \"white\" }}>{isBreakTitle? \"Break\" : \"Session\"}</span>\r\n                    <span id=\"countdown\" style={isRed ? { color: \"red\" } : { color: \"white\" }}>{isBreak? breakTimer : sessionTimer}</span>\r\n                </div>\r\n                <div id=\"icons\">\r\n                    <button id=\"play-btn\" onClick={() => { dispatch(timerThunk()); }}>\r\n                    <FaPlay  className=\"icons\"/>\r\n                    <FaPause className=\"icons\"/>\r\n                    </button>\r\n                    <button><FaRedo onClick={() => { dispatch(resetSessionThunk()); dispatch(resetBreakThunk()); dispatch(resetSessionTimerThunk()) }} id=\"repeat\" className=\"icons\" /></button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Clock","import './App.scss';\nimport Clock from './components/Clock';\n\nfunction App() {\n\n  return (\n    <>\n      <Clock />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport sessionCounterReducer from '../redux/sessionCounterSlice'\r\nimport breakCounterReducer from '../redux/breakCounterSlice'\r\nimport timerReducer from '../redux/timerSlice'\r\n\r\n\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        sessionCounter: sessionCounterReducer,\r\n        breakCounter: breakCounterReducer,\r\n        timer: timerReducer\r\n    }, \r\n    \r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}